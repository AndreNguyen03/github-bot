import { Probot } from "probot";
//import OpenAI from "openai";
// import { generateAIReview } from "./AI/reviewAI.js";
// import { postInlineComment } from "./github.js";
// import { Octokit } from "@octokit/rest";
// import { extractContextualBlocks } from "./Process/extract.js";
// import { findFirstPlusLinePosition } from "./Process/position.js";
//const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
export default (app: Probot) => {
  app.log.info("üöÄ Bot ƒë√£ s·∫µn s√†ng!");

  // app.on("pull_request.opened", async (context) => {
  //   const { owner, repo } = context.repo();
  //   const prNumber = context.payload.pull_request.number;
  //   app.log.info(`üì¶ ƒêang x·ª≠ l√Ω PR #${prNumber} t·∫°i ${owner}/${repo}`);

  //   const filesChanged = await context.octokit.pulls.listFiles({
  //     owner,
  //     repo,
  //     pull_number: prNumber,
  //   });

  //   for (const file of filesChanged.data) {
  //     if (!file.patch) continue;
  //     const addedBlocks = extractContextualBlocks(file.patch);
  //     for (const block of addedBlocks) {
  //       const blockContent = block.lines.join("\n");
  //       const patchLines = file.patch.split("\n");

  //       const position = findFirstPlusLinePosition(
  //         patchLines,
  //         block.startIndex
  //       );

  //       const aiFeedback = await generateAIReview(file.filename, blockContent);

  //       if (aiFeedback && aiFeedback.trim() !== "") {
  //         app.log.info(
  //           `üí¨ ƒêang comment v√†o ${file.filename} t·∫°i d√≤ng ${position}`
  //         );
  //         await postInlineComment(
  //           context.octokit as unknown as Octokit,
  //           owner,
  //           repo,
  //           prNumber,
  //           {
  //             ...file,
  //             position,
  //           },
  //           aiFeedback
  //         );
  //       }
  //     }
  //   }
  //   app.log.info("‚úÖ ƒê√£ x·ª≠ l√Ω xong PR.");
  // });
  app.on(["pull_request.opened", "pull_request.reopened"], async (context) => {
    const prComment = context.issue({
      body: "B·∫°n ƒë√£ t·∫°o PR! PR c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c xem x√©t! Nice a day üòä",
    });

    //app.log.info(`PR Number: ${context.payload.pull_request.number}`);
    await context.octokit.issues.createComment(prComment);

    const files = await context.octokit.pulls.listFiles(
      context.pullRequest({ per_page: 100 })
    );

    //app.log.info(`To√†n b·ªô th√¥ng tin files.data: ${files}`);
    const changedFiles = files.data.map((file) => file.filename);
    //app.log.info(`Danh s√°ch file thay ƒë·ªïi: ${changedFiles}`);

    const labelsToAdd: string[] = [];

    for (const file of changedFiles) {
      if (file.includes("docs/") && !labelsToAdd.includes("documentation")) {
        labelsToAdd.push("documentation");
      }
      if (file.includes("src/") && !labelsToAdd.includes("feature")) {
        labelsToAdd.push("feature");
      }
    }
    app.log.info(`Nh√£n c·∫ßn g·∫Øn: ${labelsToAdd}`);
    if (labelsToAdd.length > 0) {
      await context.octokit.issues.addLabels(
        context.issue({ labels: labelsToAdd }) // ‚úÖ d√πng "labels"
      );
      app.log.info(`ƒê√£ g·∫Øn nh√£n ${labelsToAdd}`);
    }
    app.log.info(`Xong`);
  });

  // app.on("issue_comment.created", async (context) => {
  //   const comment = context.payload.comment.body;
  //   const repo = context.payload.repository;
  //   const issueNumber = context.payload.issue.number;

  //   // Ki·ªÉm tra xem comment c√≥ ph·∫£i l√† l·ªánh "/ask"
  //   if (comment.startsWith("/ask")) {
  //     const question = comment.replace("/ask", "").trim();

  //     // N·∫øu ng∆∞·ªùi d√πng kh√¥ng nh·∫≠p c√¢u h·ªèi
  //     if (!question) {
  //       await context.octokit.issues.createComment(
  //         context.issue({ body: "‚ùå **B·∫°n c·∫ßn nh·∫≠p c√¢u h·ªèi sau l·ªánh /ask!**" })
  //       );
  //       return;
  //     }

  //     // L·∫•y n·ªôi dung PR
  //     const pr = await context.octokit.pulls.get({
  //       owner: repo.owner.login,
  //       repo: repo.name,
  //       pull_number: issueNumber,
  //     });

  //     const prContent = pr.data.body || "Kh√¥ng c√≥ m√¥ t·∫£ PR.";

  //     // L·∫•y danh s√°ch file thay ƒë·ªïi ƒë·ªÉ cung c·∫•p b·ªëi c·∫£nh
  //     const { data: files } = await context.octokit.pulls.listFiles({
  //       owner: repo.owner.login,
  //       repo: repo.name,
  //       pull_number: issueNumber,
  //     });

  //     let codeDiffs = "";
  //     for (const file of files) {
  //       if (file.patch) {
  //         codeDiffs += `File: ${file.filename}\n${file.patch}\n\n`;
  //       }
  //     }

  //     // G·ª≠i c√¢u h·ªèi v√† th√¥ng tin PR ƒë·∫øn OpenAI
  //     const aiResponse = await openai.chat.completions.create({
  //       model: "gpt-4o-mini",
  //       messages: [
  //         {
  //           role: "system",
  //           content: "B·∫°n l√† m·ªôt tr·ª£ l√Ω ph√¢n t√≠ch m√£ ngu·ªìn th√¥ng minh.",
  //         },
  //         {
  //           role: "user",
  //           content: `N·ªôi dung PR:\n\n${prContent}\n\nCode thay ƒë·ªïi:\n${codeDiffs}\n\nC√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${question}`,
  //         },
  //       ],
  //     });

  //     const botReply =
  //       aiResponse.choices[0]?.message?.content ||
  //       "Kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y.";

  //     // Ph·∫£n h·ªìi l·∫°i ng∆∞·ªùi d√πng
  //     await context.octokit.issues.createComment(
  //       context.issue({ body: `ü§ñ **Tr·∫£ l·ªùi:** ${botReply}` })
  //     );

  //     app.log.info(
  //       `üìå ƒê√£ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng trong PR #${issueNumber}.`
  //     );
  //   }
  // });

  //ng∆∞·ªùi d√πng t·∫°o issuess

  app.on("issue_comment.created", async (context) => {
    // c·∫•p quy·ªÅn
    if (!context.payload.issue.pull_request) return;

    app.log.info("issue comment");
    const commentBody = context.payload.comment.body.toLowerCase();
    if (commentBody.includes("rv code")) {
      await context.octokit.issues.createComment(
        context.issue({ body: "ƒê√£ ghi nh·∫≠n y√™u c·∫ßu review, s·∫Ω ph·∫£n h·ªìi s·ªõm." })
      );
    }
  });

  app.on("issues.opened", async (context) => {
    // const issueComment = context.issue({ body: "C·∫£m ∆°n b·∫°n ƒë√£ t·∫°o issue!" });
    // await context.octokit.issues.createComment(issueComment);
    const issueBody = context.payload.issue.body?.toLowerCase() || "";
    if (issueBody.includes("bug")) {
      const issueLabel = context.issue({
        labels: ["bug"],
      });
      await context.octokit.issues.addLabels(issueLabel);
      app.log.info("ƒê√£ g·∫Øn nh√£n bug cho issue");
    }
  });
};
